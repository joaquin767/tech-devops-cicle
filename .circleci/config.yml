# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
# orbs:
#   # Declare a dependency on the welcome-orb
orbs:
  aws-cli: circleci/aws-cli@2.0
  kubernetes: circleci/kubernetes@0.12.0
#   welcome: circleci/welcome-orb@0.4.1
# Orchestrate or schedule a set of jobs
jobs:
  docker-pkg:
    docker:
      - image: cimg/base:2021.07
    environment:
      PIPELINE_ID: << pipeline.id >>
      BRANCH: << pipeline.git.branch >>
    steps:
      - checkout
      # Whatever you want to do
      - setup_remote_docker:
          version: 20.10.7
      - aws-cli/setup
      - run:
          name: pkg
          command: |
            cd app/
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
            docker build . -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/clientes-app:${PIPELINE_ID}
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/clientes-app:${PIPELINE_ID}
  deploy-to-k8s:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: deploy
          command: |
            cd app/
            sudo apt-get update && sudo apt-get install -y apt-transport-https gnupg2 curl
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
            echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
            sudo apt-get update
            sudo apt-get install -y kubectl
            aws eks update-kubeconfig --name devops-cicle-eks  --region ${AWS_REGION}
            curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
            export POSTGRES_PASSWORD=$(kubectl get secret --namespace postgresql postgresql -o jsonpath="{.data.postgresql-password}" | base64 --decode)
            [[ $BRANCH = "main" ]] && ENV="production" || ENV="develop"
            eval "kubectl create namespace clientes-${ENV}"
            helm install --set tag=$PIPELINE_ID --set postgresql.password=$POSTGRES_PASSWORD clientes-app ./k8s/clientes

workflows:
  # Name the workflow "welcome"
  build:
    # Run the welcome/run job in its own container
    jobs:
      - docker-pkg
  deploy:
    jobs:
      - deploy-to-k8s
